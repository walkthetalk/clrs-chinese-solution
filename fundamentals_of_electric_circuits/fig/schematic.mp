input smetaobj;

%https://www.sioe.cn/yingyong/yanse-rgb-16/
if unknown LightPink           : color LightPink           ; LightPink            := (255,182,193)/255 fi;
if unknown Pink                : color Pink                ; Pink                 := (255,192,203)/255 fi;
if unknown Crimson             : color Crimson             ; Crimson              := (220, 20, 60)/255 fi;
if unknown LavenderBlush       : color LavenderBlush       ; LavenderBlush        := (255,240,245)/255 fi;
if unknown PaleVioletRed       : color PaleVioletRed       ; PaleVioletRed        := (219,112,147)/255 fi;
if unknown HotPink             : color HotPink             ; HotPink              := (255,105,180)/255 fi;
if unknown DeepPink            : color DeepPink            ; DeepPink             := (255, 20,147)/255 fi;
if unknown MediumVioletRed     : color MediumVioletRed     ; MediumVioletRed      := (199, 21,133)/255 fi;
if unknown Orchid              : color Orchid              ; Orchid               := (218,112,214)/255 fi;
if unknown Thistle             : color Thistle             ; Thistle              := (216,191,216)/255 fi;
if unknown Plum                : color Plum                ; Plum                 := (221,160,221)/255 fi;
if unknown Violet              : color Violet              ; Violet               := (238,130,238)/255 fi;
if unknown Magenta             : color Magenta             ; Magenta              := (255,  0,255)/255 fi;
if unknown Fuchsia             : color Fuchsia             ; Fuchsia              := (255,  0,255)/255 fi;
if unknown DarkMagenta         : color DarkMagenta         ; DarkMagenta          := (139,  0,139)/255 fi;
if unknown Purple              : color Purple              ; Purple               := (128,  0,128)/255 fi;
if unknown MediumOrchid        : color MediumOrchid        ; MediumOrchid         := (186, 85,211)/255 fi;
if unknown DarkVoilet          : color DarkVoilet          ; DarkVoilet           := (148,  0,211)/255 fi;
if unknown DarkOrchid          : color DarkOrchid          ; DarkOrchid           := (153, 50,204)/255 fi;
if unknown Indigo              : color Indigo              ; Indigo               := ( 75,  0,130)/255 fi;
if unknown BlueViolet          : color BlueViolet          ; BlueViolet           := (138, 43,226)/255 fi;
if unknown MediumPurple        : color MediumPurple        ; MediumPurple         := (147,112,219)/255 fi;
if unknown MediumSlateBlue     : color MediumSlateBlue     ; MediumSlateBlue      := (123,104,238)/255 fi;
if unknown SlateBlue           : color SlateBlue           ; SlateBlue            := (106, 90,205)/255 fi;
if unknown DarkSlateBlue       : color DarkSlateBlue       ; DarkSlateBlue        := ( 72, 61,139)/255 fi;
if unknown Lavender            : color Lavender            ; Lavender             := (230,230,250)/255 fi;
if unknown GhostWhite          : color GhostWhite          ; GhostWhite           := (248,248,255)/255 fi;
if unknown Blue                : color Blue                ; Blue                 := (  0,  0,255)/255 fi;
if unknown MediumBlue          : color MediumBlue          ; MediumBlue           := (  0,  0,205)/255 fi;
if unknown MidnightBlue        : color MidnightBlue        ; MidnightBlue         := ( 25, 25,112)/255 fi;
if unknown DarkBlue            : color DarkBlue            ; DarkBlue             := (  0,  0,139)/255 fi;
if unknown Navy                : color Navy                ; Navy                 := (  0,  0,128)/255 fi;
if unknown RoyalBlue           : color RoyalBlue           ; RoyalBlue            := ( 65,105,225)/255 fi;
if unknown CornflowerBlue      : color CornflowerBlue      ; CornflowerBlue       := (100,149,237)/255 fi;
if unknown LightSteelBlue      : color LightSteelBlue      ; LightSteelBlue       := (176,196,222)/255 fi;
if unknown LightSlateGray      : color LightSlateGray      ; LightSlateGray       := (119,136,153)/255 fi;
if unknown SlateGray           : color SlateGray           ; SlateGray            := (112,128,144)/255 fi;
if unknown DoderBlue           : color DoderBlue           ; DoderBlue            := ( 30,144,255)/255 fi;
if unknown AliceBlue           : color AliceBlue           ; AliceBlue            := (240,248,255)/255 fi;
if unknown SteelBlue           : color SteelBlue           ; SteelBlue            := ( 70,130,180)/255 fi;
if unknown LightSkyBlue        : color LightSkyBlue        ; LightSkyBlue         := (135,206,250)/255 fi;
if unknown SkyBlue             : color SkyBlue             ; SkyBlue              := (135,206,235)/255 fi;
if unknown DeepSkyBlue         : color DeepSkyBlue         ; DeepSkyBlue          := (  0,191,255)/255 fi;
if unknown LightBLue           : color LightBLue           ; LightBLue            := (173,216,230)/255 fi;
if unknown PowDerBlue          : color PowDerBlue          ; PowDerBlue           := (176,224,230)/255 fi;
if unknown CadetBlue           : color CadetBlue           ; CadetBlue            := ( 95,158,160)/255 fi;
if unknown Azure               : color Azure               ; Azure                := (240,255,255)/255 fi;
if unknown LightCyan           : color LightCyan           ; LightCyan            := (225,255,255)/255 fi;
if unknown PaleTurquoise       : color PaleTurquoise       ; PaleTurquoise        := (175,238,238)/255 fi;
if unknown Cyan                : color Cyan                ; Cyan                 := (  0,255,255)/255 fi;
if unknown Aqua                : color Aqua                ; Aqua                 := (  0,255,255)/255 fi;
if unknown DarkTurquoise       : color DarkTurquoise       ; DarkTurquoise        := (  0,206,209)/255 fi;
if unknown DarkSlateGray       : color DarkSlateGray       ; DarkSlateGray        := ( 47, 79, 79)/255 fi;
if unknown DarkCyan            : color DarkCyan            ; DarkCyan             := (  0,139,139)/255 fi;
if unknown Teal                : color Teal                ; Teal                 := (  0,128,128)/255 fi;
if unknown MediumTurquoise     : color MediumTurquoise     ; MediumTurquoise      := ( 72,209,204)/255 fi;
if unknown LightSeaGreen       : color LightSeaGreen       ; LightSeaGreen        := ( 32,178,170)/255 fi;
if unknown Turquoise           : color Turquoise           ; Turquoise            := ( 64,224,208)/255 fi;
if unknown Auqamarin           : color Auqamarin           ; Auqamarin            := (127,255,170)/255 fi;
if unknown MediumAquamarine    : color MediumAquamarine    ; MediumAquamarine     := (  0,250,154)/255 fi;
if unknown MediumSpringGreen   : color MediumSpringGreen   ; MediumSpringGreen    := (  0,255,127)/255 fi;
if unknown MintCream           : color MintCream           ; MintCream            := (245,255,250)/255 fi;
if unknown SpringGreen         : color SpringGreen         ; SpringGreen          := ( 60,179,113)/255 fi;
if unknown SeaGreen            : color SeaGreen            ; SeaGreen             := ( 46,139, 87)/255 fi;
if unknown Honeydew            : color Honeydew            ; Honeydew             := (240,255,240)/255 fi;
if unknown LightGreen          : color LightGreen          ; LightGreen           := (144,238,144)/255 fi;
if unknown PaleGreen           : color PaleGreen           ; PaleGreen            := (152,251,152)/255 fi;
if unknown DarkSeaGreen        : color DarkSeaGreen        ; DarkSeaGreen         := (143,188,143)/255 fi;
if unknown LimeGreen           : color LimeGreen           ; LimeGreen            := ( 50,205, 50)/255 fi;
if unknown Lime                : color Lime                ; Lime                 := (  0,255,  0)/255 fi;
if unknown ForestGreen         : color ForestGreen         ; ForestGreen          := ( 34,139, 34)/255 fi;
if unknown Green               : color Green               ; Green                := (  0,128,  0)/255 fi;
if unknown DarkGreen           : color DarkGreen           ; DarkGreen            := (  0,100,  0)/255 fi;
if unknown Chartreuse          : color Chartreuse          ; Chartreuse           := (127,255,  0)/255 fi;
if unknown LawnGreen           : color LawnGreen           ; LawnGreen            := (124,252,  0)/255 fi;
if unknown GreenYellow         : color GreenYellow         ; GreenYellow          := (173,255, 47)/255 fi;
if unknown OliveDrab           : color OliveDrab           ; OliveDrab            := ( 85,107, 47)/255 fi;
if unknown Beige               : color Beige               ; Beige                := (245,245,220)/255 fi;
if unknown LightGoldenrodYellow: color LightGoldenrodYellow; LightGoldenrodYellow := (250,250,210)/255 fi;
if unknown Ivory               : color Ivory               ; Ivory                := (255,255,240)/255 fi;
if unknown LightYellow         : color LightYellow         ; LightYellow          := (255,255,224)/255 fi;
if unknown Yellow              : color Yellow              ; Yellow               := (255,255,  0)/255 fi;
if unknown Olive               : color Olive               ; Olive                := (128,128,  0)/255 fi;
if unknown DarkKhaki           : color DarkKhaki           ; DarkKhaki            := (189,183,107)/255 fi;
if unknown LemonChiffon        : color LemonChiffon        ; LemonChiffon         := (255,250,205)/255 fi;
if unknown PaleGodenrod        : color PaleGodenrod        ; PaleGodenrod         := (238,232,170)/255 fi;
if unknown Khaki               : color Khaki               ; Khaki                := (240,230,140)/255 fi;
if unknown Gold                : color Gold                ; Gold                 := (255,215,  0)/255 fi;
if unknown Cornislk            : color Cornislk            ; Cornislk             := (255,248,220)/255 fi;
if unknown GoldEnrod           : color GoldEnrod           ; GoldEnrod            := (218,165, 32)/255 fi;
if unknown FloralWhite         : color FloralWhite         ; FloralWhite          := (255,250,240)/255 fi;
if unknown OldLace             : color OldLace             ; OldLace              := (253,245,230)/255 fi;
if unknown Wheat               : color Wheat               ; Wheat                := (245,222,179)/255 fi;
if unknown Moccasin            : color Moccasin            ; Moccasin             := (255,228,181)/255 fi;
if unknown Orange              : color Orange              ; Orange               := (255,165,  0)/255 fi;
if unknown PapayaWhip          : color PapayaWhip          ; PapayaWhip           := (255,239,213)/255 fi;
if unknown BlanchedAlmond      : color BlanchedAlmond      ; BlanchedAlmond       := (255,235,205)/255 fi;
if unknown NavajoWhite         : color NavajoWhite         ; NavajoWhite          := (255,222,173)/255 fi;
if unknown AntiqueWhite        : color AntiqueWhite        ; AntiqueWhite         := (250,235,215)/255 fi;
if unknown Tan                 : color Tan                 ; Tan                  := (210,180,140)/255 fi;
if unknown BrulyWood           : color BrulyWood           ; BrulyWood            := (222,184,135)/255 fi;
if unknown Bisque              : color Bisque              ; Bisque               := (255,228,196)/255 fi;
if unknown DarkOrange          : color DarkOrange          ; DarkOrange           := (255,140,  0)/255 fi;
if unknown Linen               : color Linen               ; Linen                := (250,240,230)/255 fi;
if unknown Peru                : color Peru                ; Peru                 := (205,133, 63)/255 fi;
if unknown PeachPuff           : color PeachPuff           ; PeachPuff            := (255,218,185)/255 fi;
if unknown SandyBrown          : color SandyBrown          ; SandyBrown           := (244,164, 96)/255 fi;
if unknown Chocolate           : color Chocolate           ; Chocolate            := (210,105, 30)/255 fi;
if unknown SaddleBrown         : color SaddleBrown         ; SaddleBrown          := (139, 69, 19)/255 fi;
if unknown SeaShell            : color SeaShell            ; SeaShell             := (255,245,238)/255 fi;
if unknown Sienna              : color Sienna              ; Sienna               := (160, 82, 45)/255 fi;
if unknown LightSalmon         : color LightSalmon         ; LightSalmon          := (255,160,122)/255 fi;
if unknown Coral               : color Coral               ; Coral                := (255,127, 80)/255 fi;
if unknown OrangeRed           : color OrangeRed           ; OrangeRed            := (255, 69,  0)/255 fi;
if unknown DarkSalmon          : color DarkSalmon          ; DarkSalmon           := (233,150,122)/255 fi;
if unknown Tomato              : color Tomato              ; Tomato               := (255, 99, 71)/255 fi;
if unknown MistyRose           : color MistyRose           ; MistyRose            := (255,228,225)/255 fi;
if unknown Salmon              : color Salmon              ; Salmon               := (250,128,114)/255 fi;
if unknown Snow                : color Snow                ; Snow                 := (255,250,250)/255 fi;
if unknown LightCoral          : color LightCoral          ; LightCoral           := (240,128,128)/255 fi;
if unknown RosyBrown           : color RosyBrown           ; RosyBrown            := (188,143,143)/255 fi;
if unknown IndianRed           : color IndianRed           ; IndianRed            := (205, 92, 92)/255 fi;
if unknown Red                 : color Red                 ; Red                  := (255,  0,  0)/255 fi;
if unknown Brown               : color Brown               ; Brown                := (165, 42, 42)/255 fi;
if unknown FireBrick           : color FireBrick           ; FireBrick            := (178, 34, 34)/255 fi;
if unknown DarkRed             : color DarkRed             ; DarkRed              := (139,  0,  0)/255 fi;
if unknown Maroon              : color Maroon              ; Maroon               := (128,  0,  0)/255 fi;
if unknown White               : color White               ; White                := (255,255,255)/255 fi;
if unknown WhiteSmoke          : color WhiteSmoke          ; WhiteSmoke           := (245,245,245)/255 fi;
if unknown Gainsboro           : color Gainsboro           ; Gainsboro            := (220,220,220)/255 fi;
if unknown LightGrey           : color LightGrey           ; LightGrey            := (211,211,211)/255 fi;
if unknown Silver              : color Silver              ; Silver               := (192,192,192)/255 fi;
if unknown DarkGray            : color DarkGray            ; DarkGray             := (169,169,169)/255 fi;
if unknown Gray                : color Gray                ; Gray                 := (128,128,128)/255 fi;
if unknown DimGray             : color DimGray             ; DimGray              := (105,105,105)/255 fi;
if unknown Black               : color Black               ; Black                := (  0,  0,  0)/255 fi;


vardef stringify_color(expr _c) =
	"(" & decimal(redpart(_c)) & ", "
	    & decimal(greenpart(_c)) & ", "
	    & decimal(bluepart(_c)) & ")"
enddef;

%%%%%%%%%%%%%%%%%%%%%%%%%%%% schematic aux %%%%%%%%%%%%%%%%%%%%%%%%%%%
% WARNING: if no underbar, the name will be conflict with context internal
vardef stringifyFrame@#(expr _p)=
	message "   :"
	forsuffixes $=nw,n,ne:
		& "    "
		& "("
		& decimal(xpart (@# sc_(_p & str $)))
		& ","
		& decimal(ypart (@# sc_(_p & str $)))
		& ")"
	endfor;
	message "   :"
	forsuffixes $=w,e:
		& "    "
		& "("
		& decimal(xpart (@# sc_(_p & str $)))
		& ","
		& decimal(ypart (@# sc_(_p & str $)))
		& ")"
	endfor;
	message "   :"
	forsuffixes $=sw,s,se:
		& "    "
		& "("
		& decimal(xpart (@# sc_(_p & str $)))
		& ","
		& decimal(ypart (@# sc_(_p & str $)))
		& ")"
	endfor;
enddef;

vardef ShowOctAng(suffix n)=
	draw n.nnw--n.wnw--n.wsw--n.ssw--n.sse--n.ese--n.ene--n.nne--cycle;
enddef;
vardef ShowFrame(suffix n)=
	draw n.nw--n.sw--n.se--n.ne--cycle;
enddef;
vardef ShowIFrame(suffix n)=
	draw n.inw--n.isw--n.ise--n.ine--cycle;
enddef;
%%%%%%%%%%%%%%%%%%%%%%%%%% schematic equation #######################
vardef EqBPoints@#(expr _p)(expr _dx, _dy)=
	save tmp;
	def tmp(expr _a)=
		sc_(str @# & "." & _p & _a)
	enddef;
	%tmp("se")-tmp("sw")=tmp("ne")-tmp("nw");
	%tmp("n")=.5[tmp("ne"),tmp("nw")];
	%tmp("s")=.5[tmp("se"),tmp("sw")];
	%tmp("e")=.5[tmp("ne"),tmp("se")];
	%tmp("w")=.5[tmp("nw"),tmp("sw")];
	%tmp("c")=.5[tmp("n"), tmp("s")];
	%tmp("e")-tmp("w")=(tmp("dx"), 0);
	%tmp("n")-tmp("s")=(0, tmp("dy"));
	tmp("w") =(-_dx/2,      0) rotated @#ang shifted @#c;
	tmp("e") =( _dx/2,      0) rotated @#ang shifted @#c;
	tmp("n") =(     0,  _dy/2) rotated @#ang shifted @#c;
	tmp("s") =(     0, -_dy/2) rotated @#ang shifted @#c;
	tmp("nw")=(-_dx/2,  _dy/2) rotated @#ang shifted @#c;
	tmp("ne")=( _dx/2,  _dy/2) rotated @#ang shifted @#c;
	tmp("sw")=(-_dx/2, -_dy/2) rotated @#ang shifted @#c;
	tmp("se")=( _dx/2, -_dy/2) rotated @#ang shifted @#c;
enddef;

vardef SchematicEq@#=
	@#ang:= OptionValue@#("angle");
	@#dx := OptionValue@#("dx");
	@#dy := OptionValue@#("dy");

	save DX,DY; numeric DX,DY;
	DX := @#dx + 5;
	DY := @#dy + 5;

	EqBPoints@#("i")(@#dx, @#dy);
	EqBPoints@#("")(DX, DY);

	@#ic = @#c;

	@#nnw = (-@#dx/2, DY/2) rotated @#ang shifted @#c;
	@#nne = ( @#dx/2, DY/2) rotated @#ang shifted @#c;
	@#ssw = (-@#dx/2,-DY/2) rotated @#ang shifted @#c;
	@#sse = ( @#dx/2,-DY/2) rotated @#ang shifted @#c;
	@#wnw = (-DX/2, @#dy/2) rotated @#ang shifted @#c;
	@#wsw = (-DX/2,-@#dy/2) rotated @#ang shifted @#c;
	@#ene = ( DX/2, @#dy/2) rotated @#ang shifted @#c;
	@#ese = ( DX/2,-@#dy/2) rotated @#ang shifted @#c;
enddef;

%%%%%%%%%%%%%%%%%%%%%%%% schematic path ###########################
def SchematicBpath(suffix n)=
	(n.inw--n.isw--n.ise--n.ine--cycle);
enddef;

%%%%%%%%%%%%%%%%%%%%%%%% schematic interface #######################
vardef FramePoints(expr _p)=
	ObjPoint sc_(_p & "ne");
	ObjPoint sc_(_p & "nw");
	ObjPoint sc_(_p & "se");
	ObjPoint sc_(_p & "sw");
	ObjPoint sc_(_p & "n");
	ObjPoint sc_(_p & "s");
	ObjPoint sc_(_p & "e");
	ObjPoint sc_(_p & "w");
enddef;
def SchematicInterface(expr _pin_num) =
	ObjNumeric dx,dy,ang;
	% NOTE: the ic is only for default label position.
	%       the ic is always same as c.
	ObjPoint c, ic;
	ObjPoint nnw,nne,wnw,wsw,ssw,sse,ese,ene;
	FramePoints("i");
	FramePoints("");
	ObjPointArray(pin)(_pin_num); % the pin array
	ObjNumericArray(pin_angle)(_pin_num); % the pin angle array;
enddef;

% |_edge| w,e,n,s
vardef StdPos@#(suffix _edge)(expr _offset)=
	save _edgestr; string _edgestr; _edgestr:=str _edge;
	save _pu; numeric _pu; _pu:=5;
(
	if _edgestr = "n":
		(0, -@#dy/2) shifted (_offset * _pu, 0)
	elseif _edgestr = "s":
		(0, @#dy/2) shifted (_offset * _pu, 0)
	elseif _edgestr = "w":
		(-@#dx/2, 0) shifted (0, _offset * _pu)
	elseif _edgestr = "e":
		(@#dx/2, 0) shifted (0, _offset * _pu)
	fi
)
enddef;
vardef CirclePos@#(expr _angle)=
(
	(1,0) rotated _angle xscaled (@#dx/2) yscaled (@#dy/2)
)
enddef;
% NOTE: |_pos| must use i or b_ serias points
%       |_angle|: the angle for output direction
vardef defPin@#(expr _pinid, _pos, _angle) =
	@#pin[_pinid]=_pos rotated @#ang shifted @#c;
	@#pin_angle[_pinid]=_angle + @#ang;
enddef;

%%%%%%%%%%%%%%%%%%%%%% workaround for twice run problem %%%%%%%%%%%%%%%%
% WARNING: workaround for tex twice run problem, use it before every startMPcode
def clearObjsForTwiceRun =
	for i:= 0 upto nObj_:
		if known (iname_[i]):
			_clearObj_(sc_(iname_[i]));
		fi;
		_refresh_(ClassName_[i]);
		_refresh_(iname_[i]);
	endfor;
	nObj_ := 0;

	for i:= 0 upto nClasses_:
		_refresh_(Classes_[i]);
	endfor;
	nClasses_ := 0;

	for i:= 0 upto nshortcuts_:
		_refresh_(oname_[i]);
		_refresh_(ovalue_[i]);
	endfor;
	nshortcuts_ := 0;
enddef;
vardef _refresh_(text _v) =
	if known (_v):
		if numeric _v:
			_v := whatever;
		%else if string _v:
		%	_v := whateverstring;
		elseif pair _v:
			_v := whateverpair;
		fi;
	fi;
enddef;
vardef _clearObj_(suffix n) =
	% clear objlabel in 2nd running
	% please reference https://wiki.contextgarden.net/MetaObj_and_Labels.
	save _j;
	forsuffixes $=
		pointlist_,
		pairlist_,
		pointarraylist_,
		subarraylist_,
		stringarraylist_,
		colorarraylist_,
		picturearraylist_,
		transformarraylist_,
		booleanarraylist_,
		numericarraylist_,
		pairarraylist_,
		points_in_arrayslist_,
		picturelist_,
		numericlist_,
		booleanlist_,
		colorlist_,
		stringlist_,
		transformlist_,
		sublist_
		:
		if known n.$:
			forsuffixes _j=scantokens(n.$):
				if known n._j.n_:
					for i:=0 upto n._j.n_:
						_refresh_(n._j[i]);
					endfor;
					n._j.n_ := 0;
				else:
					_refresh_(n._j);
				fi;
			endfor;
			n.$:=whateverstring;
		fi;
	endfor;
enddef;
%%%%%%%%%%%%%%%%%%%%%%%%%%% workaround for same name in different fig %%%%%%
% WARNING: only for constructing different objects in different beginfig
%   setX("test0");
%   newEmptyBox.X(eb0)();
string ObjPrefix_;
ObjPrefix_:="";
def setX(expr s)= ObjPrefix_:=s enddef;
def X(suffix s)= sc_(ObjPrefix_).s enddef;

%%%%%%%%%%%%%%%%%%%%%%%%%% default options %%%%%%%%%%%%%%%%%%%%%%
setCurveDefaultOption("arrows")("draw");
setCurveDefaultOption("linecolor")(SteelBlue);

%%%%%%%%%%%%%%%%%% Resistor DIN %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("R")("angle")(0);
setObjectDefaultOption("R")("dx")(30);
setObjectDefaultOption("R")("dy")(10);
setObjectDefaultOption("R")("linecolor")(FireBrick);
setObjectDefaultOption("R")("pathfillcolor")(Khaki);
setObjectDefaultOption("R")("framed")(true);

vardef newR@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "R");

	SchematicInterface(2);

	ObjCode "SchematicEq@#",
		"defPin@#(1,StdPos@#(w, 0),180)",
		"defPin@#(2,StdPos@#(e, 0),0)";

	ObjPath(BpathR(@#)) "pathfilled(true)";
enddef;
def BpathR(suffix n)=
	SchematicBpath(n)
enddef;
def drawR(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%% Resistor ANSI %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("Ra")("angle")(0);
setObjectDefaultOption("Ra")("dx")(30);
setObjectDefaultOption("Ra")("dy")(10);
setObjectDefaultOption("Ra")("linecolor")(Green);
setObjectDefaultOption("Ra")("pathfillcolor")(Khaki);
setObjectDefaultOption("Ra")("framed")(true);

vardef newRa@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "Ra");

	SchematicInterface(2);

	ObjCode "SchematicEq@#",
		"defPin@#(1,StdPos@#(w, 0),180)",
		"defPin@#(2,StdPos@#(e, 0),0)";

	save _rwire, _rwn; path _rwire; numeric _rwn;
	_rwn := 4;
	save _x;
	vardef _x(expr _i, _p)=
		((4 * (_i - 1) + _p)/(4 * _rwn))
	enddef;
	_rwire := (0,0);
	for i:=1 step 1 until _rwn:
		_rwire := _rwire
			-- (_x(i, 1), 0.5)
			-- (_x(i, 3),-0.5)
			-- (_x(i, 4),  0);
	endfor;
	ObjPath(_rwire shifted (-0.5,0)
		xscaled OptionValue@#("dx")
		yscaled OptionValue@#("dy")
		rotated OptionValue@#("angle")
		shifted @#.c);
enddef;
def BpathRa(suffix n)=
	SchematicBpath(n)
enddef;
def drawRa(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%% Dependent Current Source %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("DCS")("angle")(0);
setObjectDefaultOption("DCS")("dx")(25);
setObjectDefaultOption("DCS")("dy")(25);
setObjectDefaultOption("DCS")("linecolor")(FireBrick);
setObjectDefaultOption("DCS")("pathfillcolor")(Khaki);

vardef newDCS@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "DCS");

	SchematicInterface(2);

	ObjCode "SchematicEq@#",
		"defPin@#(1,StdPos@#(w, 0),180)",
		"defPin@#(2,StdPos@#(e, 0),0)";
	
	ObjPath(BpathDCS(@#)) "pathfilled(true)";
	ObjPath((.25[@#iw,@#.ie]--.75[@#.iw,@#.ie]))
		"arrows(drawarrow)";
enddef;
def BpathDCS(suffix n)=
	(n.in--n.iw--n.is--n.ie--cycle)
enddef;
def drawDCS(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%% Independent Current Source %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("ICS")("angle")(0);
setObjectDefaultOption("ICS")("dx")(20);
setObjectDefaultOption("ICS")("dy")(20);
setObjectDefaultOption("ICS")("linecolor")(FireBrick);
setObjectDefaultOption("ICS")("pathfillcolor")(Khaki);

vardef newICS@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "ICS");

	SchematicInterface(2);

	ObjCode "SchematicEq@#",
		"defPin@#(1,StdPos@#(w, 0),180)",
		"defPin@#(2,StdPos@#(e, 0),0)";

	ObjPath(BpathICS(@#)) "pathfilled(true)";
	ObjPath((.25[@#iw,@#.ie]--.75[@#.iw,@#.ie]))
		"arrows(drawarrow)";
enddef;
def BpathICS(suffix n)=
	(n.in..n.iw..n.is..n.ie..cycle)
enddef;
def drawICS(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%% Dependent Voltage Source %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("DVS")("angle")(0);
setObjectDefaultOption("DVS")("dx")(20);
setObjectDefaultOption("DVS")("dy")(20);
setObjectDefaultOption("DVS")("linecolor")(FireBrick);
setObjectDefaultOption("DVS")("pathfillcolor")(Khaki);

vardef newDVS@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "DVS");

	SchematicInterface(2);

	ObjCode "SchematicEq@#",
		"defPin@#(1,StdPos@#(w, 0),180)",
		"defPin@#(2,StdPos@#(e, 0),0)";

	ObjPath(BpathDVS(@#)) "pathfilled(true)";

	begingroup;
	save xxx;
	vardef xxx(suffix n)(expr _pos, _llur)=
		save lpos;pair lpos; lpos=_pos[n.iw,n.ie];
		((lpos-.5_llur)--(lpos+.5_llur))
	enddef;
	ObjPath(xxx(@#)(.3, (@#dx/4,0)));
	ObjPath(xxx(@#)(.7, (@#dx/4,0)));
	ObjPath(xxx(@#)(.7, (0,@#dy/4)));
	endgroup;
enddef;
def BpathDVS(suffix n)=
	(n.in--n.iw--n.is--n.ie--cycle)
enddef;
def drawDVS(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%% Inependent Voltage Source %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("IVS")("angle")(0);
setObjectDefaultOption("IVS")("dx")(20);
setObjectDefaultOption("IVS")("dy")(20);
setObjectDefaultOption("IVS")("linecolor")(FireBrick);
setObjectDefaultOption("IVS")("pathfillcolor")(Khaki);

vardef newIVS@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "IVS");

	SchematicInterface(2);

	ObjCode "SchematicEq@#",
		"defPin@#(1,StdPos@#(w, 0),180)",
		"defPin@#(2,StdPos@#(e, 0),0)";

	ObjPath(BpathIVS(@#)) "pathfilled(true)";

	begingroup;
	save xxx;
	vardef xxx(suffix n)(expr _pos, _llur)=
		save lpos;pair lpos; lpos=_pos[n.iw,n.ie];
		((lpos-.5_llur)--(lpos+.5_llur))
	enddef;
	ObjPath(xxx(@#)(.3, (@#dx/4,0)));
	ObjPath(xxx(@#)(.7, (@#dx/4,0)));
	ObjPath(xxx(@#)(.7, (0,@#dy/4)));
	endgroup;
enddef;
def BpathIVS(suffix n)=
	(fullcircle scaled n.dx shifted n.c)
enddef;
def drawIVS(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%% Current Direction Mark %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("CDM")("angle")(0);
setObjectDefaultOption("CDM")("dx")(15);
setObjectDefaultOption("CDM")("dy")(5);
setObjectDefaultOption("CDM")("linecolor")(FireBrick);
setObjectDefaultOption("CDM")("pathfillcolor")(Khaki);

vardef newCDM@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "CDM");

	SchematicInterface(2);

	ObjCode "SchematicEq@#",
		"defPin@#(1,StdPos@#(w, 0),180)",
		"defPin@#(2,StdPos@#(e, 0),0)";

	ObjPath(BpathCDM(@#)) "arrows(->)";
enddef;
def BpathCDM(suffix n)=
	(n.iw--n.ie)
enddef;
def drawCDM(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%% Node %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("Node")("angle")(0);
setObjectDefaultOption("Node")("dx")(3);
setObjectDefaultOption("Node")("dy")(3);
setObjectDefaultOption("Node")("linecolor")(FireBrick);
setObjectDefaultOption("Node")("pathfillcolor")(FireBrick);

vardef newNode@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "Node");

	SchematicInterface(4);

	ObjCode "SchematicEq@#",
		"defPin@#(1,StdPos@#(w, 0),180)",
		"defPin@#(2,StdPos@#(n, 0),90)",
		"defPin@#(3,StdPos@#(e, 0),0)",
		"defPin@#(4,StdPos@#(s, 0),-90)";

	ObjPath(BpathNode(@#)) "pathfilled(true)";
enddef;
def BpathNode(suffix n)=
	(n.in..n.iw..n.is..n.ie..cycle)
enddef;
def drawNode(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%% Switch %%%%%%%%%%%%%%%%%%
setObjectDefaultOption("Switch")("angle")(0);
setObjectDefaultOption("Switch")("dx")(25);
setObjectDefaultOption("Switch")("dy")(25);
setObjectDefaultOption("Switch")("linecolor")(FireBrick);
setObjectDefaultOption("Switch")("pathfillcolor")(FireBrick);

vardef newSwitch@#(expr _defcp) text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "Switch");

	SchematicInterface(4);

	ObjCode "SchematicEq@#",
		"defPin@#(3,CirclePos@#(180),180)",
		"defPin@#(1,CirclePos@#(60),0)",
		"defPin@#(2,CirclePos@#(-60),0)";

	ObjPath(BpathSwitch(@#));% "pathfilled(true)";
	%for i:=1 upto 3:
	%	ObjPath(fullcircle scaled 1 shifted @#.pin[i])
	%		"linecolor(blue)", "pathfillcolor(blue)", "pathfilled(true)";
	%endfor;
	ObjPath(@#.pin[3]--@#.pin[_defcp]) "arrows(->)";
enddef;
def BpathSwitch(suffix n)=
	(n.in..n.iw..n.is..n.ie..cycle)
enddef;
def drawSwitch(suffix n) =
	drawMemorizedPaths_(n);
enddef;
%%%%%%%%%%%%%%%%%%%%%%%% pin connection simple %%%%%%%%%%%%%%%%%%%
% ncdiaga: ncdiag without armlength, auto intersect two directions
% |@#| is the object to which a line is added
% |n| is the source subobject, |m| is the target.
% We also distinguish the case when |n| and |m| are objects
% and when they are points (numerics vs pairs).
vardef pcsimple@#(text n)(text pn)(text m)(text pm) text options =
	save aA,aB; numeric aA, aB;
	aA := n.pin_angle[pn];
	aB := m.pin_angle[pm] + 180;
  ncshort_@#("nc","pcsimple")(n.pin[pn])(m.pin[pm])(options,
	"angleA(" & decimal(aA) & ")",
	"angleB(" & decimal(aB) & ")");
enddef;


vardef pcsimple_(suffix $)(suffix n,m)(suffix p)=
  % we have to find one additional points; we must be careful
  % not to use assignments, because |n.c| and |m.c|
  % may be floating:
  save ap;pair ap[];
  save aA,aB;numeric aA, aB;
  aA := CLOV_("angleA");
  aB := CLOV_("angleB");

  setupobjectfunction(n);

  if ((aA-aB) mod 180 <> 0): % intersect
    ap1-f(n)("A")=whatever*dir(aA);
    f(m)("B")-ap1=whatever*dir(aB);
    nc_core_$(n)(p)
      (smoothen(object_(n)("A")--ap1--object_(m)("B")
         cutbefore BpathObj(n) cutafter BpathObj(m))(CLOV_("linearc")))
      (smoothen(objectpoint_(n)("A")--ap1--objectpoint_(m)("B"))
         (CLOV_("linearc")));
  else: % same direction
    ap1-f(n)("A")=CLOV_("armA")*dir(aA);
    f(m)("B")-ap2=whatever*dir(aB);
    ap2-ap1=whatever*dir(aA-90);
    nc_core_$(n)(p)
      (smoothen(object_(n)("A")--ap1--ap2--object_(m)("B")
         cutbefore BpathObj(n) cutafter BpathObj(m))(CLOV_("linearc")))
      (smoothen(objectpoint_(n)("A")--ap1--ap2--objectpoint_(m)("B"))
         (CLOV_("linearc")));
  fi;
enddef;

%%%%%%%%%%%%%%%%%%%%% pin connection line %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% |@#| is the object to which a line is added
% |n| is the source subobject, |m| is the target.
% We also distinguish the case when |n| and |m| are objects
% and when they are points (numerics vs pairs)
vardef pcline@#(text n)(text m) text options =
  ncshort_@#("nc","pcline")(n)(m)(options);
enddef;

vardef pcline_(suffix $)(suffix n,m)(suffix p)=
  nc_core_$(n)(p)
    (object_(n)("A")..object_(m)("B")
        cutbefore BpathObj(n) cutafter BpathObj(m))
    (objectpoint_(n)("A")..objectpoint_(m)("B"));
enddef;
