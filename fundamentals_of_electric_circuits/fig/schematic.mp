input smetaobj;

%https://www.sioe.cn/yingyong/yanse-rgb-16/
if unknown LightPink           : color LightPink           ; LightPink            := (255,182,193)/255 fi;
if unknown Pink                : color Pink                ; Pink                 := (255,192,203)/255 fi;
if unknown Crimson             : color Crimson             ; Crimson              := (220, 20, 60)/255 fi;
if unknown LavenderBlush       : color LavenderBlush       ; LavenderBlush        := (255,240,245)/255 fi;
if unknown PaleVioletRed       : color PaleVioletRed       ; PaleVioletRed        := (219,112,147)/255 fi;
if unknown HotPink             : color HotPink             ; HotPink              := (255,105,180)/255 fi;
if unknown DeepPink            : color DeepPink            ; DeepPink             := (255, 20,147)/255 fi;
if unknown MediumVioletRed     : color MediumVioletRed     ; MediumVioletRed      := (199, 21,133)/255 fi;
if unknown Orchid              : color Orchid              ; Orchid               := (218,112,214)/255 fi;
if unknown Thistle             : color Thistle             ; Thistle              := (216,191,216)/255 fi;
if unknown Plum                : color Plum                ; Plum                 := (221,160,221)/255 fi;
if unknown Violet              : color Violet              ; Violet               := (238,130,238)/255 fi;
if unknown Magenta             : color Magenta             ; Magenta              := (255,  0,255)/255 fi;
if unknown Fuchsia             : color Fuchsia             ; Fuchsia              := (255,  0,255)/255 fi;
if unknown DarkMagenta         : color DarkMagenta         ; DarkMagenta          := (139,  0,139)/255 fi;
if unknown Purple              : color Purple              ; Purple               := (128,  0,128)/255 fi;
if unknown MediumOrchid        : color MediumOrchid        ; MediumOrchid         := (186, 85,211)/255 fi;
if unknown DarkVoilet          : color DarkVoilet          ; DarkVoilet           := (148,  0,211)/255 fi;
if unknown DarkOrchid          : color DarkOrchid          ; DarkOrchid           := (153, 50,204)/255 fi;
if unknown Indigo              : color Indigo              ; Indigo               := ( 75,  0,130)/255 fi;
if unknown BlueViolet          : color BlueViolet          ; BlueViolet           := (138, 43,226)/255 fi;
if unknown MediumPurple        : color MediumPurple        ; MediumPurple         := (147,112,219)/255 fi;
if unknown MediumSlateBlue     : color MediumSlateBlue     ; MediumSlateBlue      := (123,104,238)/255 fi;
if unknown SlateBlue           : color SlateBlue           ; SlateBlue            := (106, 90,205)/255 fi;
if unknown DarkSlateBlue       : color DarkSlateBlue       ; DarkSlateBlue        := ( 72, 61,139)/255 fi;
if unknown Lavender            : color Lavender            ; Lavender             := (230,230,250)/255 fi;
if unknown GhostWhite          : color GhostWhite          ; GhostWhite           := (248,248,255)/255 fi;
if unknown Blue                : color Blue                ; Blue                 := (  0,  0,255)/255 fi;
if unknown MediumBlue          : color MediumBlue          ; MediumBlue           := (  0,  0,205)/255 fi;
if unknown MidnightBlue        : color MidnightBlue        ; MidnightBlue         := ( 25, 25,112)/255 fi;
if unknown DarkBlue            : color DarkBlue            ; DarkBlue             := (  0,  0,139)/255 fi;
if unknown Navy                : color Navy                ; Navy                 := (  0,  0,128)/255 fi;
if unknown RoyalBlue           : color RoyalBlue           ; RoyalBlue            := ( 65,105,225)/255 fi;
if unknown CornflowerBlue      : color CornflowerBlue      ; CornflowerBlue       := (100,149,237)/255 fi;
if unknown LightSteelBlue      : color LightSteelBlue      ; LightSteelBlue       := (176,196,222)/255 fi;
if unknown LightSlateGray      : color LightSlateGray      ; LightSlateGray       := (119,136,153)/255 fi;
if unknown SlateGray           : color SlateGray           ; SlateGray            := (112,128,144)/255 fi;
if unknown DoderBlue           : color DoderBlue           ; DoderBlue            := ( 30,144,255)/255 fi;
if unknown AliceBlue           : color AliceBlue           ; AliceBlue            := (240,248,255)/255 fi;
if unknown SteelBlue           : color SteelBlue           ; SteelBlue            := ( 70,130,180)/255 fi;
if unknown LightSkyBlue        : color LightSkyBlue        ; LightSkyBlue         := (135,206,250)/255 fi;
if unknown SkyBlue             : color SkyBlue             ; SkyBlue              := (135,206,235)/255 fi;
if unknown DeepSkyBlue         : color DeepSkyBlue         ; DeepSkyBlue          := (  0,191,255)/255 fi;
if unknown LightBLue           : color LightBLue           ; LightBLue            := (173,216,230)/255 fi;
if unknown PowDerBlue          : color PowDerBlue          ; PowDerBlue           := (176,224,230)/255 fi;
if unknown CadetBlue           : color CadetBlue           ; CadetBlue            := ( 95,158,160)/255 fi;
if unknown Azure               : color Azure               ; Azure                := (240,255,255)/255 fi;
if unknown LightCyan           : color LightCyan           ; LightCyan            := (225,255,255)/255 fi;
if unknown PaleTurquoise       : color PaleTurquoise       ; PaleTurquoise        := (175,238,238)/255 fi;
if unknown Cyan                : color Cyan                ; Cyan                 := (  0,255,255)/255 fi;
if unknown Aqua                : color Aqua                ; Aqua                 := (  0,255,255)/255 fi;
if unknown DarkTurquoise       : color DarkTurquoise       ; DarkTurquoise        := (  0,206,209)/255 fi;
if unknown DarkSlateGray       : color DarkSlateGray       ; DarkSlateGray        := ( 47, 79, 79)/255 fi;
if unknown DarkCyan            : color DarkCyan            ; DarkCyan             := (  0,139,139)/255 fi;
if unknown Teal                : color Teal                ; Teal                 := (  0,128,128)/255 fi;
if unknown MediumTurquoise     : color MediumTurquoise     ; MediumTurquoise      := ( 72,209,204)/255 fi;
if unknown LightSeaGreen       : color LightSeaGreen       ; LightSeaGreen        := ( 32,178,170)/255 fi;
if unknown Turquoise           : color Turquoise           ; Turquoise            := ( 64,224,208)/255 fi;
if unknown Auqamarin           : color Auqamarin           ; Auqamarin            := (127,255,170)/255 fi;
if unknown MediumAquamarine    : color MediumAquamarine    ; MediumAquamarine     := (  0,250,154)/255 fi;
if unknown MediumSpringGreen   : color MediumSpringGreen   ; MediumSpringGreen    := (  0,255,127)/255 fi;
if unknown MintCream           : color MintCream           ; MintCream            := (245,255,250)/255 fi;
if unknown SpringGreen         : color SpringGreen         ; SpringGreen          := ( 60,179,113)/255 fi;
if unknown SeaGreen            : color SeaGreen            ; SeaGreen             := ( 46,139, 87)/255 fi;
if unknown Honeydew            : color Honeydew            ; Honeydew             := (240,255,240)/255 fi;
if unknown LightGreen          : color LightGreen          ; LightGreen           := (144,238,144)/255 fi;
if unknown PaleGreen           : color PaleGreen           ; PaleGreen            := (152,251,152)/255 fi;
if unknown DarkSeaGreen        : color DarkSeaGreen        ; DarkSeaGreen         := (143,188,143)/255 fi;
if unknown LimeGreen           : color LimeGreen           ; LimeGreen            := ( 50,205, 50)/255 fi;
if unknown Lime                : color Lime                ; Lime                 := (  0,255,  0)/255 fi;
if unknown ForestGreen         : color ForestGreen         ; ForestGreen          := ( 34,139, 34)/255 fi;
if unknown Green               : color Green               ; Green                := (  0,128,  0)/255 fi;
if unknown DarkGreen           : color DarkGreen           ; DarkGreen            := (  0,100,  0)/255 fi;
if unknown Chartreuse          : color Chartreuse          ; Chartreuse           := (127,255,  0)/255 fi;
if unknown LawnGreen           : color LawnGreen           ; LawnGreen            := (124,252,  0)/255 fi;
if unknown GreenYellow         : color GreenYellow         ; GreenYellow          := (173,255, 47)/255 fi;
if unknown OliveDrab           : color OliveDrab           ; OliveDrab            := ( 85,107, 47)/255 fi;
if unknown Beige               : color Beige               ; Beige                := (245,245,220)/255 fi;
if unknown LightGoldenrodYellow: color LightGoldenrodYellow; LightGoldenrodYellow := (250,250,210)/255 fi;
if unknown Ivory               : color Ivory               ; Ivory                := (255,255,240)/255 fi;
if unknown LightYellow         : color LightYellow         ; LightYellow          := (255,255,224)/255 fi;
if unknown Yellow              : color Yellow              ; Yellow               := (255,255,  0)/255 fi;
if unknown Olive               : color Olive               ; Olive                := (128,128,  0)/255 fi;
if unknown DarkKhaki           : color DarkKhaki           ; DarkKhaki            := (189,183,107)/255 fi;
if unknown LemonChiffon        : color LemonChiffon        ; LemonChiffon         := (255,250,205)/255 fi;
if unknown PaleGodenrod        : color PaleGodenrod        ; PaleGodenrod         := (238,232,170)/255 fi;
if unknown Khaki               : color Khaki               ; Khaki                := (240,230,140)/255 fi;
if unknown Gold                : color Gold                ; Gold                 := (255,215,  0)/255 fi;
if unknown Cornislk            : color Cornislk            ; Cornislk             := (255,248,220)/255 fi;
if unknown GoldEnrod           : color GoldEnrod           ; GoldEnrod            := (218,165, 32)/255 fi;
if unknown FloralWhite         : color FloralWhite         ; FloralWhite          := (255,250,240)/255 fi;
if unknown OldLace             : color OldLace             ; OldLace              := (253,245,230)/255 fi;
if unknown Wheat               : color Wheat               ; Wheat                := (245,222,179)/255 fi;
if unknown Moccasin            : color Moccasin            ; Moccasin             := (255,228,181)/255 fi;
if unknown Orange              : color Orange              ; Orange               := (255,165,  0)/255 fi;
if unknown PapayaWhip          : color PapayaWhip          ; PapayaWhip           := (255,239,213)/255 fi;
if unknown BlanchedAlmond      : color BlanchedAlmond      ; BlanchedAlmond       := (255,235,205)/255 fi;
if unknown NavajoWhite         : color NavajoWhite         ; NavajoWhite          := (255,222,173)/255 fi;
if unknown AntiqueWhite        : color AntiqueWhite        ; AntiqueWhite         := (250,235,215)/255 fi;
if unknown Tan                 : color Tan                 ; Tan                  := (210,180,140)/255 fi;
if unknown BrulyWood           : color BrulyWood           ; BrulyWood            := (222,184,135)/255 fi;
if unknown Bisque              : color Bisque              ; Bisque               := (255,228,196)/255 fi;
if unknown DarkOrange          : color DarkOrange          ; DarkOrange           := (255,140,  0)/255 fi;
if unknown Linen               : color Linen               ; Linen                := (250,240,230)/255 fi;
if unknown Peru                : color Peru                ; Peru                 := (205,133, 63)/255 fi;
if unknown PeachPuff           : color PeachPuff           ; PeachPuff            := (255,218,185)/255 fi;
if unknown SandyBrown          : color SandyBrown          ; SandyBrown           := (244,164, 96)/255 fi;
if unknown Chocolate           : color Chocolate           ; Chocolate            := (210,105, 30)/255 fi;
if unknown SaddleBrown         : color SaddleBrown         ; SaddleBrown          := (139, 69, 19)/255 fi;
if unknown SeaShell            : color SeaShell            ; SeaShell             := (255,245,238)/255 fi;
if unknown Sienna              : color Sienna              ; Sienna               := (160, 82, 45)/255 fi;
if unknown LightSalmon         : color LightSalmon         ; LightSalmon          := (255,160,122)/255 fi;
if unknown Coral               : color Coral               ; Coral                := (255,127, 80)/255 fi;
if unknown OrangeRed           : color OrangeRed           ; OrangeRed            := (255, 69,  0)/255 fi;
if unknown DarkSalmon          : color DarkSalmon          ; DarkSalmon           := (233,150,122)/255 fi;
if unknown Tomato              : color Tomato              ; Tomato               := (255, 99, 71)/255 fi;
if unknown MistyRose           : color MistyRose           ; MistyRose            := (255,228,225)/255 fi;
if unknown Salmon              : color Salmon              ; Salmon               := (250,128,114)/255 fi;
if unknown Snow                : color Snow                ; Snow                 := (255,250,250)/255 fi;
if unknown LightCoral          : color LightCoral          ; LightCoral           := (240,128,128)/255 fi;
if unknown RosyBrown           : color RosyBrown           ; RosyBrown            := (188,143,143)/255 fi;
if unknown IndianRed           : color IndianRed           ; IndianRed            := (205, 92, 92)/255 fi;
if unknown Red                 : color Red                 ; Red                  := (255,  0,  0)/255 fi;
if unknown Brown               : color Brown               ; Brown                := (165, 42, 42)/255 fi;
if unknown FireBrick           : color FireBrick           ; FireBrick            := (178, 34, 34)/255 fi;
if unknown DarkRed             : color DarkRed             ; DarkRed              := (139,  0,  0)/255 fi;
if unknown Maroon              : color Maroon              ; Maroon               := (128,  0,  0)/255 fi;
if unknown White               : color White               ; White                := (255,255,255)/255 fi;
if unknown WhiteSmoke          : color WhiteSmoke          ; WhiteSmoke           := (245,245,245)/255 fi;
if unknown Gainsboro           : color Gainsboro           ; Gainsboro            := (220,220,220)/255 fi;
if unknown LightGrey           : color LightGrey           ; LightGrey            := (211,211,211)/255 fi;
if unknown Silver              : color Silver              ; Silver               := (192,192,192)/255 fi;
if unknown DarkGray            : color DarkGray            ; DarkGray             := (169,169,169)/255 fi;
if unknown Gray                : color Gray                ; Gray                 := (128,128,128)/255 fi;
if unknown DimGray             : color DimGray             ; DimGray              := (105,105,105)/255 fi;
if unknown Black               : color Black               ; Black                := (  0,  0,  0)/255 fi;


vardef stringify_color(expr _c) =
	"(" & decimal(redpart(_c)) & ", "
	    & decimal(greenpart(_c)) & ", "
	    & decimal(bluepart(_c)) & ")"
enddef;

%%%%%%%%%%%%%%%%%%%%%%%%%%%% schematic aux %%%%%%%%%%%%%%%%%%%%%%%%%%%
def ORPoints=
  one,onw,osw,ose,on,os,oe,ow,oc,rne,rnw,rsw,rse,rn,rs,re,rw,rc
enddef;
vardef defORPoints@#=
	@#ose-@#osw=@#one-@#onw;
	@#on=.5[@#one,@#onw];
	@#os=.5[@#ose,@#osw];
	@#oe=.5[@#one,@#ose];
	@#ow=.5[@#onw,@#osw];
	@#oc=.5[@#on,@#os];
	@#oc=@#c;
	@#ose-@#osw=(OptionValue@#("dx"), 0);
	@#one-@#ose=(0, OptionValue@#("dy"));

	forsuffixes $=ne,nw,sw,se,n,s,e,w,c:
		@# sc_("r" & str $) - @#oc = (@# sc_("o" & str $) - @#oc) rotated OptionValue@#("angle");
	endfor;

	xpart(@#se-@#sw)=xpart(@#rse-@#rnw);
	ypart(@#ne-@#se)=ypart(@#rne-@#rsw);
enddef;

def SchematicInterface(expr _pin_num) =
	ObjPoint ORPoints;
	ObjPointArray(p)(_pin_num); % the pin array
	ObjNumericArray(pa)(_pin_num); % the pin angle array;
enddef;

vardef defPin@#(expr _pinid, _pos, _angle) =
	@#p[_pinid]=_pos;
	@#pa[_pinid]=_angle + OptionValue@#("angle");
enddef;

%%%%%%%%%%%%%%%%%%%%%% workaround for twice run problem %%%%%%%%%%%%%%%%
def isexist(suffix $) =
	known $code_
enddef;
def clear(suffix $) =
	if known $ipic_1:
		% clear objlabel in 2nd running
		% please reference https://wiki.contextgarden.net/MetaObj_and_Labels.
		$ipic_.n_:=0;
		$ipic_.off_.n_:=0;
		$ipic_.transf_.n_:=0;
		$ipic_.col_.n_:=0;
		$ipic_.erase_.n_:=0;
	fi;
enddef;

% define safe version for new object
vardef defineSafeNew(expr _type)=
  save tmp;string tmp;
  tmp="vardef snew" & _type & "@#" & " text _pars =" &
        "if isexist(@#):" &
            "clear(@#);" &
        "else:" &
            "new" & _type & "@# _pars;" &
        "fi;" &
      "enddef;";
  sc_ tmp;
enddef;

defineSafeNew("Box");
defineSafeNew("EmptyBox");

%%%%%%%%%%%%%%%%%%%%%%%%%% default options %%%%%%%%%%%%%%%%%%%%%%
setCurveDefaultOption("arrows")("draw");
setCurveDefaultOption("linecolor")(SteelBlue);

%%%%%%%%%%%%%%%%%% Resistor %%%%%%%%%%%%%%%%%%
defineSafeNew("R");
setObjectDefaultOption("R")("angle")(0);
setObjectDefaultOption("R")("dx")(25);
setObjectDefaultOption("R")("dy")(10);
setObjectDefaultOption("R")("linecolor")(FireBrick);
setObjectDefaultOption("R")("pathfillcolor")(Khaki);

vardef newR@# text options =
	ExecuteOptions(@#)(options);
	assignObj(@#, "R");

	StandardInterface;
	SchematicInterface(2);

	ObjCode StandardEquations,
		"defORPoints@#",
		"defPin@#(1,@#rw,180)",
		"defPin@#(2,@#re,0)";

	ObjPath(@#rsw--@#rse--@#rne--@#rnw--cycle)
		"linecolor(" & stringify_color(OptionValue@#("linecolor")) & ")",
		"pathfilled(true)",
		"pathfillcolor(" & stringify_color(OptionValue@#("pathfillcolor")) &")";
enddef;
def BpathR(suffix n)=
	(n.rnw--n.rsw--n.rse--n.rne--cycle)
	%StandardBpath(n)
enddef;
def drawR(suffix n) =
	drawMemorizedPaths_(n);
enddef;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ncdiaga %%%%%%%%%%%%%%%%%%%%%%%%%
% ncdiaga: ncdiag without armlength, auto intersect two directions
% |@#| is the object to which a line is added
% |n| is the source subobject, |m| is the target.
% We also distinguish the case when |n| and |m| are objects
% and when they are points (numerics vs pairs).
vardef ncdiaga@#(text n)(text m) text options =
  ncshort_@#("nc","ncdiaga")(n)(m)(options);
enddef;
vardef ncpdiaga@#(text n)(text pn)(text m)(text pm) text options =
  ncdiaga@#(n.p[pn])(m.p[pm]) options,
	"angleA(" & decimal(n.pa[pn]) & ")",
	"angleB(" & decimal(m.pa[pm]) & ")";
enddef;


vardef ncdiaga_(suffix $)(suffix n,m)(suffix p)=
  % we have to find one additional points; we must be careful
  % not to use assignments, because |n.c| and |m.c|
  % may be floating:
  save ap;pair ap;
  setupobjectfunction(n);
  ap-f(n)("A")=whatever*dir(CLOV_("angleA"));
  f(m)("B")-ap=whatever*dir(CLOV_("angleB"));
  nc_core_$(n)(p)
    (smoothen(object_(n)("A")--ap--object_(m)("B")
       cutbefore BpathObj(n) cutafter BpathObj(m))(CLOV_("linearc")))
    (smoothen(objectpoint_(n)("A")--ap--objectpoint_(m)("B"))
       (CLOV_("linearc")));
enddef;
