%D \module
%D   [     file=p-foecsolution,
%D      version=2014.05.01,
%D        title=\CONTEXT\ User Module,
%D     subtitle=foecsolution,
%D       author=Yi Qingliang,
%D         date=\currentdate,
%D    copyright=Yi Qingliang,
%D        email=niqingliang2003@gmail.com,
%D      license=Public Domain]

\writestatus{loading}{ConTeXt User Module / foecsolution}
\startmodule[foecsolution]

\define\prdname{《电路基础》習題彙編}

\setupinteraction[
  state=start,
  color=blue,
  contrastcolor=blue,
  style=bold,
  title={《电路基础》習題彙編},
  author={倪慶亮},
  subtitle={《电路基础》習題彙編},
  keyword=电路基础 笔记,
]

% use custom phys-dim for custom padding
\usemodule[p][phys-dim]

% use \unit with space
\def\sunit{\dosingleempty\dosunit}
\unexpanded\def\dosunit[#1]#2{%
  \doifelse{#1}{lr}{%
    {\;}\unit{#2}{\;}%
  }{%
    \doifelse{#1}{l}{%
      {\;}\unit{#2}%
    }{%
      \doifelse{#1}{r}{%
        \unit{#2}{\;}%
      }{%
        \unit{#2}%
      }%
    }%
  }%
}

\def\munit{\dosingleempty\domunit}
\unexpanded\def\domunit[#1]#2{%
\ifmmode%
  \iffirstargument\sunit[#1]{#2}\else\sunit{#2}\fi%
\else%
  \math{\iffirstargument\sunit[#1]{#2}\else\sunit{#2}\fi}%
\fi%
}

\startMPinclusions
% text label
vardef tlabel@#(expr strname, pos) text p =
	label@#(textext(strname), pos) p
enddef;

% math label
vardef mlabel@#(expr strname, pos) text p =
	label@#(textext("$" & strname & "$"), pos) p
enddef;

vardef defcoord(expr _ux, _uy, _ox, _oy, _ah) =
	numeric ux, uy, ox, oy, ah;
	ux := _ux;	% scale x
	uy := _uy;	% scale y
	ah := _ah;	% mark
	ox := _ox;	% offset x
	oy := _oy;	% offset y

	string defloc.x;
	defloc.x := "bot";
	string defloc.y;
	defloc.y := "lft";
enddef;

vardef defdim@#(expr name)(text pl) =
	string dname@#;
	numeric plist@#[];
	numeric pmid@#;
	string ploc@#[];

	dname@# := name;
	pmid@# := -1;
	for _p = pl:
		pmid@# := pmid@# + 1;
		plist@#[pmid@#] := _p;
		ploc@#[pmid@#] := defloc@#;
	endfor;
enddef;

vardef setloc@#(expr loc)(text pl) =
	for _p = pl:
		for i := 0 step 1 until pmid@#:
			if (plist@#[i] = _p):
				ploc@#[i] := loc;
			fi;
		endfor;
	endfor;
enddef;

vardef coordsys =
image(
	% draw x
	numeric lftx, rtx;
	if plist.x[0] < 0:
		lftx := plist.x[0] * ux - ox;
	else:
		lftx := 0;
	fi;
	if plist.x[pmid.x] > 0:
		rtx := plist.x[pmid.x] * ux + ox;
	else:
		rtx := 0;
	fi;
	drawarrow (lftx,0)--(rtx,0);
	for i := 0 step 1 until pmid.x:
		draw (plist.x[i]*ux, 0)--(plist.x[i]*ux, ah);
		mlabel. scantokens(ploc.x[i]) (decimal(plist.x[i]), (plist.x[i]*ux, 0));
	endfor;
	mlabel.lrt(dname.x, (rtx, 0));

	% draw y
	numeric lowy, upy;
	if plist.y[0] < 0:
		lowy := plist.y[0] * uy - oy;
	else:
		lowy := 0;
	fi;
	if plist.y[pmid.y] > 0:
		upy := plist.y[pmid.y] * uy + oy;
	else:
		upy := 0;
	fi;
	drawarrow (0,lowy)--(0,upy);
	for i := 0 step 1 until pmid.y:
		draw (0,plist.y[i]*uy)--(ah,plist.y[i]*uy);
		mlabel. scantokens(ploc.y[i]) (decimal(plist.y[i]), (0,plist.y[i]*uy));
	endfor;
	mlabel.lft(dname.y, (0, upy));

	if lowy < 0:
		if lftx < 0:
			mlabel.llft(decimal(0), (0,0));
		else:
			mlabel.lft(decimal(0), (0,0));
		fi;
	else:
		mlabel.bot(decimal(0), (0,0));
	fi;
)
enddef;

vardef polyval(expr x)(text _cl) =
	numeric _r, _p, _xp;
	_r := 0;	% ret
	_p := 0;	% power
	_xp:= 1;
	for _c = _cl:
		_r  := _r + _xp * _c;

		_xp := _xp * x;
		_p  := _p + 1;
	endfor;
	%message "(" & decimal(x) & ", " & decimal(_r) & ")";
	_r
enddef;

vardef polytan(expr x)(text _cl) =
	save _r, _p, _xp;
	numeric _r, _p, _xp;
	_r := 0;	% ret
	_p := 0;	% power
	_xp:= 1;
	for _c = _cl:
		if _p <> 0:
			_r  := _r + _p * _xp * _c;
			_xp := _xp * x;
		fi;
		_p  := _p + 1;
	endfor;
	_r
enddef;

vardef polydef@#(expr l,r,mx,ma)(text _pl) =
	save dist,j;
	numeric dist,j;
	numeric n@#;
	numeric x@#[];
	numeric y@#[];
	numeric t@#[];	% tan
	numeric a@#[];	% angle degree

	j := 0;
	x@#[j] := l;
	y@#[j] := polyval(x@#[j])(_pl);
	t@#[j] := polytan(x@#[j])(_pl);
	a@#[j] := angle(1, t@#[j]);

	forever:
		j := j + 1;
		dist := 2 * mx;
		forever:
			dist := dist / 2;
			x@#[j] := x@#[j-1] + dist;
			y@#[j] := polyval(x@#[j])(_pl);
			t@#[j] := polytan(x@#[j])(_pl);
			a@#[j] := angle(1,t@#[j]);
			adiff := abs(a@#[j-1] - a@#[j]);
			exitif (adiff < ma);
		endfor;

		exitif (x@#[j] >= r);
	endfor;

	x@#[j] := r;
	y@#[j] := polyval(r)(_pl);
	t@#[j] := polytan(r)(_pl);
	a@#[j] := angle(1, t@#[j]);

	n@# := j;
enddef;

vardef polyaux@# =
image(
	for i := 0 step 1 until n@#:
		pair ppos;
		ppos := ((x@#[i], y@#[i]) xscaled ux yscaled uy);
		draw fullcircle scaled 2 shifted ppos;
		message "####### " & decimal(i) & ": " & decimal(t@#[i]) & "       at " & decimal(x@#[i]);
		pair pdir;
		pdir := (1, t@#[i]) xscaled ux yscaled uy;
		pair pchui;
		pchui := (xpart(ppos) + xpart(pdir), ypart(ppos));
		draw ppos--pchui;
		draw pchui--(xpart(pchui), ypart(ppos)+ypart(pdir));
	endfor;
)
enddef;

vardef polycurve@# =
	for i := 0 step 1 until n@#:
		if (i = n@#):
			{(1, t@#[i])}
		fi
		(x@#[i], y@#[i])
		if (i < n@#):
			{(1, t@#[i])}..
		fi
	endfor
enddef;

vardef drawemp(expr pa) =
	draw pa xyscaled(ux,uy) withcolor darkred withpen pencircle scaled 1.2
enddef;
vardef drawref(expr pa) =
	draw pa xyscaled(ux,uy) withcolor blue withpen pencircle scaled 1.2
enddef;
vardef drawaux(expr pa) =
	draw pa xyscaled(ux,uy) dashed evenly
enddef;
vardef drawauxp.v(text _pl) =
	for _p = _pl:
		drawaux(_p--(xpart(_p), 0));
	endfor;
enddef;
vardef drawauxp.h(text _pl) =
	for _p = _pl:
		drawaux(_p--(0, ypart(_p)));
	endfor;
enddef;
vardef drawauxp.vh(text pl) =
	drawauxp.v(pl);
	drawauxp.h(pl);
enddef;
vardef drawauxp.p(text _pl) =
	for _p = _pl:
		draw fullcircle scaled 2 shifted (_p xyscaled(ux,uy))
			withcolor blue withpen pencircle scaled 1.2;
	endfor;
enddef;
\stopMPinclusions

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% for enum %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NOTE: if you want to use specific font:
% \definefontsynonym [MartinVogel] [marvosym.ttf]
% \definesymbol [Sun]                [\getnamedglyphdirect{MartinVogel}{Sun}]
\definesymbol [1] [*]
\definesymbol [2] [-]


\defineenumeration[Q][
  text={Problem},
  right={:\,},
  headstyle=\rm\bf,	%normal bold slanted boldslanted type cap small... command
  %headcolor=red,
  %style=\rm\bf,		%normal bold slanted boldslanted type cap small... command
  %color=red,	%name
  width=fit,	%fit broad dimension
  distance=0em,		%dimension
%sample	text
  %align=flushleft,	%flushleft middle flushright
  %margin=no,	%standard yes no dimension
  alternative=serried,	%left right top serried inmargin inleft inright hanging
  %hang=2,		%fit broad number
%headcommand	command
%before	command
%inbetween={\startEnglish},	%command
%after={\stopEnglish},	%command
%indentnext	yes no
%indenting	never not no yes always first next
  prefix=yes,
  prefixsegments=chapter, %chapter:section
  prefixconnector={.},
  numberstopper={},
  way=bychapter,
]

\define[1]\refq{%
\in{Problem}{}[Q:#1]%
}

\definestartstop[A][%
  before={\startcolor[black]},
  after={\stopcolor},
]

% no number
\defineitemgroup[IG][levels=2]
\setupitemgroup[IG]
[1]
[a, packed,joinedup,broad]
%standard broad serried packed unpacked stopper joinedup atmargin inmargin autointro loose repeat section paragraph intext random columns
%standard: default setup
%n*broad:  extra horizontal white space after symbol
%n*serried:little horizontal white space after symbol
%packed:   no whitespace between items
%stopper:  punctuation after item separator
%joinedup: no white space before and after itemization
%atmargin: item separator at the margin
%inmargin: item separator in margin
[
%margin=2em,	%no standard dimension
  leftmargin=2em,	%no standard dimension
%rightmargin	no standard dimension
  %width=2em,	%dimension
%distance	dimension
%factor	number
%items	number
%start	number
  before=,	%command
  inbetween=,	%command
  after={\blank[.5ex]},	%command
  left={(},	%text
  right={)},	%text
%beforehead	command
%afterhead	command
%headstyle=boldslanted, %normal bold slanted boldslanted type cap small... command
%marstyle=boldslanted, %normal bold slanted boldslanted type cap small... command
%symstyle=boldslanted, %normal bold slanted boldslanted type cap small... command
  stopper=,	%text
%n	number
%  symbol=1,	%number
%align	left right normal
  indenting=next,	%never not no yes always first next
  indentnext=auto,	%yes no
]
\setupitemgroup[IG][2]
[2, packed,joinedup,intext][
  leftmargin=4em,	%no standard dimension
  %width=2em,	%dimension
  before=,	%command
  inbetween=,	%command
  after=,	%command
%  symbol=2,
  indenting=next,
  indentnext=auto,
]

\setupitemgroup[IG][each][][leftmargin=2em]
%m	A numbered list, with lowercase (“medieval”, aka “oldstyle”) numbers.
%1 … 8	Different kinds of bullets. All items get the same symbol.
%a	Items are numbered a., b., c., …
%A	Items are numbered A., B., C., …
%AK	Items are numbered A., B., C., …, in small caps.
%r	Items are numbered in lowercase Roman numerals.
%R	Items are numbered in uppercase Roman numerals.
%KR	Items are numbered in uppercase Roman numerals, small caps style.

% with number
\defineitemgroup[igNum][levels=2]
\setupitemgroup[igNum]
[1]
[a, packed,joinedup,intext]
[
  leftmargin=2em,	%no standard dimension
  %width=2em,	%dimension
  before=,	%command
  inbetween=,	%command
  after={\blank[.5ex]},	%command
  indenting=next,
  indentnext=auto,
]
\setupitemgroup[igNum]
[2]
[a, packed,joinedup,intext]
[
  leftmargin=4em,	%no standard dimension
  %width=2em,	%dimension
  before=,	%command
  inbetween=,	%command
  after={\blank[.5ex]},	%command
  indenting=next,
  indentnext=auto,
]

\setupformulae[%
%location	left right
%left	text
%right	text
%align	flushleft middle flushright
%option	middle
%strut	yes no
%distance	dimension
%margin	dimension standard yes no
%leftmargin	dimension
%rightmargin	dimension
  indentnext=auto,	%yes no
%alternative	name
%spacebefore	dimension
%spaceafter	dimension
%separator	text
%conversion	numbers characters Characters romannumerals Romannumerals text
]

\define[1]\refformula{%
\in{公式}{}[formula:#1]%
}

\define[1]\TODO{#1}

\definemathmatrix[pmatrix]%
[left={\left(\,},right={\,\right)}]

\stopmodule
\endinput

